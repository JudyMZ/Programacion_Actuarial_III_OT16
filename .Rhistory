?rnorm
help.search("rnorm")
args(rnorm)
rnorm(100)
set.seed(1)
rnorm(10)
rnorm
?rnorm
help.search(rnorm)
help.search("rnorm")
arg(rnorm)
args(rnorm)
rnorm(100)
10 ##Primer Nivel
11
12 ## Segundo Nivel
13
13 ### Tercer Nivel
## *Segundo Nivel *
15
16 Lista
a <- available.packages()
head(a,3)
head(rownames(a),3)
n <- signif(nrow(a),2)
n
install.packages("ggplot2")
source("htttp://bioconductor.org_/biocLite.R")
source("http://bioconductor.org_/biocLite.R")
source("http://bioconductor.org/biocLite.R")
installed.packages()
library(ggplot2)
required(ggplot2)
require(ggplot2)
install.packages("Rcpp")
library(ggplot2)
require(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("Rtools")
install.packages("devtools")
install.packages("rmarkdown")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
library(ggplot2)
x <-1
print(x)
x
msg <- "Hola"
msg
x <- ##Esto es un comentario
2
x
x<- 1:20
x
?vector
vector(mode="numeric", length=5)
a <- vector(mode="numeric", length=5)
a
1/3
1L/3
class(1)
class(1L)
1/0
0/0
attributes(airquality)
x <-1
x
print(x)
# Clase del 25/08/2016
#Crear vectores
x <- vector(mode="numeric", length= 5L)
x
x <- c(TRUE, FALSE, T, F)
x
class(x)
# Clase del 25/08/2016
#Crear vectores con la funcion vector
x <- vector(mode="numeric", length= 5L)
x
# Crear vectores con la funcion C
x <- c(0.5,0.6)
x
class(x)
x <- c(TRUE, FALSE, T, F)
x
class(x)
x <- 5:10
x
class(x)
x <- 10:0
x
class(x)
x <- c(1+2i,5,3+9i,-4-5i)
x
class(x)
x <- c("a","b"."c","d", e)
x
class(x)
x <- c("a","b","c","d", e)
x
class(x)
y <- c(1.7, "a")  #caracter
y
y <- c(1.7, "a")
y
class(y)
y <- c("a", TRUE) #caracter
y
y <- c(TRUE,2)    #numerico
y
class(y)
y <- c(TRUE,10L,8.5,1+1i,"Nacho")
y
class(y)
y <- c(TRUE,10L,8.5,1+1i)
y
class(y)
y <- c(TRUE,10L,8.5)
y
class(y)
y <- c(TRUE,10L)
y <- c(TRUE,10L)
y
class(y)
y <- c(TRUE)
y
class(y)
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.character(z)
z <- c(1+2i, 3+4i, 8, 0+3i, 0)
as.logical(z)
z <- c("Programacion", "Acturial", "III")
as.numeric(z)
as.logical(z)
as.complex(z)
x <- list(1, "a", TrUE, 1+4i)
x
x <- list(1, "a", TRUE, 1+4i)
x
x <- list(1, "a", TRUE, 1+4i, 1:100)
x
class(x)
?matrix
m <- matrix(nrow= 2, ncol = 3)
m
dim(m)
attributes(m)
library(ggplot2)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
library("http://bioconductor.org/biocLite.R")
library(rmarkdown)
source("http://bioconductor.org/biocLite.R", dpendencies =TRUE)
install.packages("Devtools")
library(devtools)
library(devtools)
library("ggplot2")
source("http://bioconductor.org/biocLite.R", dpendencies =TRUE)
library(ggplto2)
library(ggplot2)
library(devtools)
?source
source("http://bioconductor.org/biocLite.R", dependencies =TRUE)
source("http://bioconductor.org/biocLite.R")
library(BiocInstaller)
install.packages("Rtools")
library(Rtools)
library(Rtools)
install.packages("Rtools", dependencies = TRUE)
library(Rtools)
library(ggplot2)
library(devtools)
library(BiocInstaller)
m <- matrix(nrow=2,ncol=3)
m
dim(m)
attributes()
attributes(m)
m <- matrix(nrow=2,ncol = 3)
m
dim(m)
attributes(m)
dim(m) <- c(3,2) ## crear verctor
m
m <- matrix(nrow=2,ncol = 3)
m
dim(m)
attributes(m)
dim(m) <- c(3,2) ## crear verctor
m
m<- matrix(1:6, 3,2)
#Datos de 1-6  e filas y dos columnas
m
m<- matrix(1:6,3,2,TRUE)
m
m<-matrix(1:6,3,3,T)
m
class(m)
str(m)
dim(m)<- c(2,5)
x<- c(1,2,3)
y<- c("a","b", "c")
z<- c(x,y)
#combinar los vectores x y y
z
m1 <- rbind(m,x)
m1
m2 <- cbind(m,x)
m2
m1<- rbind(m,y)
m1
m2<-cbind(m,y)
m2
rbind(m1,y)
cbind(m2,y)
?Markdown
apply?
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv") #simplificacion de la 134
data
mode(class(data))
class(mode(data))
str(data)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv") #simplificacion de la 134
data
mode(class(data))
class(mode(data))
str(data)
t<-data[1,1]
str(data,class)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
mode(class(data))
class(mode(data))
str(data,class)
z<- sapply(data, class)
z
t<-data[1,1]
z<- lapply(data, class)
z
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
str(data)
table.class(data)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
type(data)
str(data)
?matrix
?data frame
?dta.frame
?data.frame
?`data.frame-class`
setOldClass(c(Data))
setOldClass(data)
data.class(data)
data.class(data.frame)
data.class(mode(class(data)))
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
mode(class(data))
print(class(data))
str(data)
print(strtable(data), na.print='')
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
mode(class(data))
z<- lapply(data, class)
z
z<- sapply(data, class)
z
class(str(data))
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
class(str(data))
?str.dendrogram
?str
str(class(data))
str(class(1:10))
str(class(data.class()))
str(class(data.class(data)))
str(class(nrow(data)))
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv", nrow=10)
data
str(class(nrow(data)))
str(data)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
str(data)
str(data, max.level)
str(data, class)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
str(data)
str(str)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
data[,1]
class class(t)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
t<-data[,1]
t
class(t)
t<-data[,2]
t<-data[,2]
t
class(t)
?for
iiiug
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:10)
t<-data[,x]
class(t)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:10){print(x)}
t<-data[,x]
class(t)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:10)
t<-data[,col=x]
class(t)
for (x in 1:10)
t<-data[,x]
x<- class(t)
for (x in 1:10)
t<-data[,x]
print(class(t))
for (x in 1:10){print(class(t))}
t<- data[,x]
for (x in col=1:cola=10){print(class(t))}
for (x in 1:10){t<- data[,x]}
class(t)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:10){class(data[,x])}
for (x in 1:10){print(class(data[,x]))}
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:10){print(class(data[,x]))}
s<-data
for (x in 1:10){print(class(s[,x]))}
for (x in 1:10){print(class(data[0,x]))}
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:7){print(class(data[0,x]))}
str(data)
lapply(data,class)
setwd("~/GitHub/Programacion_Actuarial_III_OT16")
data<- read.csv("Datos_S&P.csv")
data
for (x in 1:7){print(class(data[0,x]))}
#SÃ­ utilizamos "str" tambien nos da la clase de cada columna
lapply(data,class)
